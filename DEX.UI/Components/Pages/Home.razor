@page "/"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@using System.Text

<PageTitle>Home</PageTitle>

<h3>DEX File Sender</h3>
<button type="button" @onclick='() => SendDex("Machine A")'>Send DEX - Machine A</button>
<button type="button" @onclick='() => SendDex("Machine B")'>Send DEX - Machine B</button>


@code
{
    private HttpClient ContentHttpClient => HttpClientFactory.CreateClient("BlazorContentClient");
    private HttpClient ApiHttpClient => HttpClientFactory.CreateClient("BackendClient");
    private string DexReportMachineA = "";
    private string DexReportMachineB = "";
    private string MachineA = "Machine A";

    protected override async Task OnInitializedAsync()
    {
        DexReportMachineA = await ContentHttpClient.GetStringAsync("DEX_Machine_A.txt");
        DexReportMachineB = await ContentHttpClient.GetStringAsync("DEX_Machine_B.txt");
    }

    private async Task SendDex(string machine)
    {
        var dexData = machine == "Machine A" ? DexReportMachineA : DexReportMachineB;

        var username = Configuration["Authentication:Username"];
        var password = Configuration["Authentication:Password"];
        var authValue = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{username}:{password}"));

        var request = new HttpRequestMessage(HttpMethod.Post, "api/v1/vdi-dex")
            {
                Content = new StringContent($"{{\"dexFile\": \"{dexData}\"}}", Encoding.UTF8, "application/json")
            };

        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", authValue);

        try
        {
            var response = await ApiHttpClient.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();
            Console.WriteLine("API Response: " + result);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending DEX: {ex.Message}");
        }
    }
}
