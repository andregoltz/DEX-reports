@page "/"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@using System.Text
@using System.Text.Json

<PageTitle>Home</PageTitle>

<h3>DEX File Sender</h3>
<button type="button" @onclick='() => SendDex("A")'>Send DEX - Machine A</button>
<button type="button" @onclick='() => SendDex("B")'>Send DEX - Machine B</button>
<button type="button" @onclick='() => Delete()'>Delete Stored Data</button>

<div class="mt-3">
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success">
            <pre>@JsonSerializer.Serialize(SuccessMessage)</pre>
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            <pre>@JsonSerializer.Serialize(ErrorMessage)</pre>
        </div>
    }
</div>


@code
{
    private HttpClient ContentHttpClient => HttpClientFactory.CreateClient("BlazorContentClient");
    private HttpClient ApiHttpClient => HttpClientFactory.CreateClient("BackendClient");
    private string DexReportMachineA = "";
    private string DexReportMachineB = "";
    public string SuccessMessage { get; set; } = string.Empty;
    public string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        DexReportMachineA = await ContentHttpClient.GetStringAsync("DEX_Machine_A.txt");
        DexReportMachineB = await ContentHttpClient.GetStringAsync("DEX_Machine_B.txt");
    }

    private async Task SendDex(string machine)
    {
        var dexData = machine == "A" ? DexReportMachineA : DexReportMachineB;

        var username = Configuration["Authentication:Username"];
        var password = Configuration["Authentication:Password"];
        var authValue = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{username}:{password}"));

        var jsonPayload = JsonSerializer.Serialize(new
        {
            machine = machine,
            dexFile = dexData
        });


        var request = new HttpRequestMessage(HttpMethod.Post, "api/v1/vdi-dex")
        {
            Content = new StringContent(jsonPayload, Encoding.UTF8, "application/json")
        };

        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", authValue);

        try
        {
            var response = await ApiHttpClient.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var successResponse = JsonSerializer.Deserialize<SuccessResponse>(result);
                ShowSuccessMessage($"DEX file saved successfully! DEXMeter ID: {successResponse.dexMeterID}, DEXLaneMeter ID: {successResponse.dexLaneMeterID}");
            }
            else
            {
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(result);
                ShowErrorMessage($"Failed to save DEX file: {errorResponse.message}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Error sending DEX: {ex.Message}");
        }
    }

    private async Task Delete()
    {
        var username = Configuration["Authentication:Username"];
        var password = Configuration["Authentication:Password"];
        var authValue = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{username}:{password}"));

        var request = new HttpRequestMessage(HttpMethod.Delete, "api/v1/deleteAll");

        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", authValue);

        try
        {
            var response = await ApiHttpClient.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                var successResponse = JsonSerializer.Deserialize<SuccessResponse>(result);
                ShowSuccessMessage(successResponse.message);
            }
            else
            {
                ShowErrorMessage($"Failed to delete DEX: {result}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting DEX: {ex.Message}");
        }
    }

    private void ShowSuccessMessage(string message)
    {
        SuccessMessage = message;
        ErrorMessage = "";
    }


    private void ShowErrorMessage(string message)
    {
        ErrorMessage = message;
        SuccessMessage = "";
    }

    public class SuccessResponse
    {
        public string message { get; set; } = string.Empty;
        public string dexMeterID { get; set; } = string.Empty;
        public string dexLaneMeterID { get; set; } = string.Empty;
        public string status { get; set; } = string.Empty;
    }

    public class ErrorResponse
    {
        public string message { get; set; } = string.Empty;
        public string status { get; set; } = string.Empty;
    }
}
